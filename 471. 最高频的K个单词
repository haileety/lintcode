package com.java.Algorithm.lintcode;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class TopKFrequentWords {
	 class Node {
	        int freq;
	        String str;
	        public Node(String str, int freq){
	            this.str = str;
	            this.freq = freq;
	        }
	    }
	 public static void main(String[] args) {
		 
/*		 Example
		 Given
		 [
		     "yes", "lint", "code",
		     "yes", "code", "baby",
		     "you", "baby", "chrome",
		     "safari", "lint", "code",
		     "body", "lint", "code"
		 ]
		 for k = 3, return ["code", "lint", "baby"].
		 for k = 4, return ["code", "lint", "baby", "yes"],
*/
//		 String[] words={"yes", "lint", "code",
//				 "yes", "code","baby",
//				 "you", "baby", "chrome",
//				 "safari", "lint", "code",
//				 "body", "lint", "code"};
//		 int k=3
		String [] words={"1","1","1","2","2","3","3"};
		 int k=2;
		 String []result=new TopKFrequentWords().topKFrequentWords(words,k);
		 for (int s = 0; s < result.length; s++) {
			System.out.println(result[s]);
		}
	 }
	    public String[] topKFrequentWords(String[] words, int k) {
	        String[] rst = new String[k];
	        if (words == null || words.length == 0 || k <= 0) {
	            return rst;
	        }
	        //map
	        HashMap<String, Node> map = new HashMap<String, Node>();
	        for (int i = 0 ; i < words.length; i++) {
	            if (!map.containsKey(words[i])) {
	                map.put(words[i], new Node(words[i], 0));
	            }
	            map.get(words[i]).freq = map.get(words[i]).freq + 1; 
	        }
	        //queue
	        PriorityQueue<Node> queue = new PriorityQueue<Node>(k, new Comparator<Node>(){
	            public int compare(Node a, Node b) {
	                if (a.freq == b.freq) {
	                    return a.str.compareTo(b.str);
	                } else {
	                    return b.freq - a.freq;
	                }
	            } 
	        });
	        for (Map.Entry<String, Node> entry : map.entrySet()) {
	            queue.offer(entry.getValue());
	        }
	        //output
	        for (int i = 0; i < k; i++) {
	            rst[i] = queue.poll().str;
	        }
	        
	        return rst;
	    }
}

