package com.java.Algorithm.lintcode;

import java.util.HashMap;

/*
 * 【题目】
给定String类型的额数组atrArr，再给定证书k，请严格按照排名顺序打印出现次数前k名的字符串。
【举例】
strArr=["1","2","3","4"],k=2
No.1: 1,times:1
No.2: 2,times:1
这种情况下，所有的字符串都出现一样多，随便打印任何两个字符串都可以。
strArr=["1","1","2","3"],k=2
输出：
No.1: 1,times:2
No.2: 2,times:1
或者输出：
No.1: 1,times:2
No.2: 3,times:1

【要求】
  如果strArr长度为N，时间复杂度请达到O（Nlogk）

【进阶题目】
 设计并实现TopKRecord结构，可以不断地向其中加入字符串，并且可以根据字符串出现的情况随时打印加入次数最多前k个字符串，具体为：
1，k在TopKRecord实例生成时指定，并且不再变化（k是构造函数的参数）。
2，含有add（String str）方法，即打印加入次数最多的前k个字符串，打印有哪些字符串和对应的次数即可，不要求严格按排名顺序打印。
【举例】
TopKRecord record = new TopKRecord(k);//打印Top2的结构
record.add("A");
record.printTopK();
此时打印：
	TOP：
	Str:A Times:1 
record.add("B");
record.add("B");
record.printTopK();
此时打印：
	TOP：
	Str:A Times:1 
	Str:B Times:2 
或者打印
	TOP：
	Str:B Times:2 
	Str:A Times:1 

record.add("C");
record.add("C");
record.printTopK();
此时打印：
	TOP：
	Str:B Times:2 
	Str:C Times:2 
或者打印
	TOP：
	Str:C Times:2 
	Str:B Times:2 
【要求】
1，在任何时刻，add方法的时间复杂度不超过O（logk）
2，在任何时刻，printTopK方法的时间复杂度不超过O（k）
【难度】
 原问题  两颗星**
 进阶问题  三颗星***
 首先遍历strArr并统计字符串中的词频，用哈希表的每条信息可以生成Node类的实例，Node类如下
public class Node {
    private  String str;
    private  int times;
    public Node(String str, int times) {
        this.str = str;
        this.times = times;
    }
}
哈希表中有多少信息，就建立多少Node类的实例，并且一次放入堆中，具体过程为：
1，建立一个大小为k的小根堆，这个堆放入的是Node类的实例。
2，遍历哈希表的每条数据，假设一条记录为（s,t），s表示一种字符串，s的词频为t，则生成Node类的实例，记为（str，times）
1）如果小根堆没有满就直接将将（str，times）加入堆，然后进行建堆调整（heapInsert），堆中Node类实例之间都以词频（times）来进行比较，词频越小，位置越往上。
2）如果小根堆没有满，说明此时小根堆已经选出k个最高词频的字符串，那么整个小根堆的堆顶自然代表已经选出的k个最高词频的字符串中，词频最低的那个。堆顶的元素记为（headStr，minTimes）。如果minTimes<times,说明字符串str有资格进入当前k个最高词频字符串的范围。而headStr应该被移除这个范围，所以把当前的堆顶（headStr，minTimes）替换成（str，times），然后从堆顶的位置进行堆的调整（heapify）。如果minTimes>=times,说明字符串str没有资格进入当前k个最高词频字符串的范围，因为str的词频还不如目前选出的k个最高词频字符串中词频最少的那个，所以什么也不做。
3.遍历完strArr之后，小根堆里就是所有字符串中k个最高词频的字符串，但要求严格按排名打印，所以还需要根据词频从大到小完成k个元素间的排序。
  遍历strArr建议哈希表的过程为O（N），哈希表中记录的条数最多位N条，每一条记录进堆时，堆的调整时间复杂度为O（Logk），所以根据记录更新小根堆的过程为O(Nlogk)，k调记录排序的时间复杂度为O（klogk）。所以总的时间复杂度为O（N）+O(Nlogk)+O（klogk），即O(Nlogk)


 */

 

/*
 * 1，当加入一个字符串时，假设为str。首先在strNodeMap中差str之前出现的词频，如果查不到，说明str为第一次出现，
 * 在strNodeMap中加入一条记录（key=str，value=（str，1））。
如果可以查到，说明str之前出现过，此时需要把str的词频增加，假设之前出现过10次，那么查到的记录为（key=str，value=（str，10）），
变更为（key=str，value=（str，11））。
2，建立或调整完str的Node实例信息后，需要考虑这个Node的实例信息是否已经在堆上，通过查询nodeIndexMap表可以得到Node实例对应的堆上的位置，
如果没有或查询结果为-1，表示不在堆上，否则表示在堆上，位置记为pos。
  1）如果在堆上，说明str词频没增加之前就是Top K之一，现在词频既然增加了，就需要考虑调整str对应的Node实例信息在堆中的位置，  从pos位置开始向下调整小根堆即可（heapify）。
特别注意：为了保证nodeIndexMap表中位置信息的始终准确，调整堆时，每一次连个堆元素（Node实例）之间的位置交换都要更新在nodeIndexMap表中的位置，
比如，在堆上的一个Node实例（“A”，10）原来在2位置，在nodeIndexMap表中的信息为
（key=（“A”，10）,value=2）.现在又加入了一个“A”，词频增加，信息当然要变成（key=（“A”，11）,value=2）。
然后从位置2调整堆时，发现这个实例需要和自己的一个孩子实例（“B”，10）交换，假设这个Node实例的位置是6，
即在nodeIndexMap表中记录为（key=（“B”，10）,value=6）.那么在彼此交换位置之后，在heap数组中的两个实例当然很容易交换位置，
但同时在nodeIndexMap上各自的信息也要变更，分别变更为（key=（“A”，11）,value=6），（key=（“B”，10）,value=2）。
也就是说，任何Node实例在堆汇总的位置调整都要改相应的nodeIndexMap表信息，这也是整个TopKRecord结构设计中最关键的逻辑。
  2）如果不在堆中，则看当前的小根堆是否已满（index？=k）。如果没有满（index<k），那么把str的Node实例放入堆底（heap的index位置），
  自然也要在nodeIndexMao表中加上位置信息。然后做堆在插入时的调整（heapInsert），同样，任何交换都要改nodeIndexMao表。
  如果已满（index==k），则看str的词频是否大于小根堆堆顶的词频（heap[0]），如果不大于，则什么都不做。
  如果大于堆顶的词频，把str的Node实例设为新的堆顶，然后从位置0开始向下调整堆（heapify），同样，任何堆中元素的变更都要更改nodeIndexMap表。
3，过程结束。
在加入新的字符串时，都可能会调整堆，而对最大也仅是k的大小，所以add方法时间复杂度为O（logK）。随时更新的小根堆是每时每刻的TopK，打印是又没有排序的要求，所以printTopK方法直接依次打印小根堆数组即可，时间复杂度为O（K）

 */
public class TopKRecord {
	private Node[]heap;
	//index表示如果新的Node类的实例要加入到heap，该放在heap的那个位置
	private int index;
	//哈希表strNodeMap。key为字符串类型，表示加入的某种字符串。value为Node类型。strNodeMap上的每条信息表示一种字符串及其所对应的Node实例
	private HashMap<String, Node>strNodeMap;
	//哈希表nodeIndexMap,key为Node类型，表示一种字符串及其词频信息，
	//value为整型，表示key这个Node类的实例对应到heap上的位置，如果不在heap上，为-1.
	private HashMap<Node,Integer>nodeIndexMap;
	public TopKRecord(int size){
		heap=new Node[size];
		index=0;
		strNodeMap= new HashMap<String, Node>();
		nodeIndexMap = new HashMap<Node, Integer>();
	}
	public void add(String str){
		Node curNode = null;
		//表示此字符串在之前堆中位置，-1表示之前堆中不存在
		int preIndex=-1;
		//如果strNodeMap不包含，为第一次出现str，则在strNodeMap中加入一条记录（key=str，value（str，1））
		if(!strNodeMap.containsKey(str)){
			curNode = new Node(str, 1);
			strNodeMap.put(str, curNode);
			nodeIndexMap.put(curNode, -1);
		}else{
			//如果可以查到，说明之前出现过，此时需要把词频增加
			curNode = strNodeMap.get(str);
			curNode.times++;
			preIndex = nodeIndexMap.get(curNode);
		}
		//如果不在堆上，则看当前的小根堆是否已满
		if(preIndex ==-1){
			//如果已满（index==k），则看str的词频是否大于小根堆堆顶的词频（heap[0]）
			if(index == heap.length){
				//如果大于堆顶的词频，把str的Node实例设为新的堆顶，然后从位置0开始向下调整堆（heapify）.如果不大于，则什么都不做
				if(heap[0].times<curNode.times){
					nodeIndexMap.put(heap[0], -1);
					nodeIndexMap.put(curNode, 0);
					heap[0] = curNode;
					heapify(0,index);
				}
			}else{
				//如果没有满（index<k），那么把str的Node实例放入堆底（heap的index位置），自然也要在nodeIndexMao表中加上位置信息。
				//然后做堆在插入时的调整（heapInsert），同样，任何交换都要改nodeIndexMao表。
				nodeIndexMap.put(curNode, index);
				heap[index]=curNode;
				heapInsert(index++);
			}
		}else{
			//如果在堆上，说明str词频没增加之前就是Top K之一，现在词频既然增加了，就需要考虑调整str对应的Node实例信息在堆中的位置，
			//从preIndex位置开始向下调整小根堆即可（heapify）。
			heapify(preIndex,index);
		}
	}
	private void heapInsert(int i) {
		// TODO Auto-generated method stub
		while(index!=0){
			int parent=(index-1)/2;
			if(heap[index].times<heap[parent].times){
				swap(parent,index);
				index=parent;
			}else{
				break;
			}
		}
	}
	private void swap(int index1, int index2) {
		nodeIndexMap.put(heap[index1], index2);
		nodeIndexMap.put(heap[index2], index1);
		Node temp=heap[index1];
		heap[index1]=heap[index2];
		heap[index2]=temp;
		
	}
	private void heapify(int index, int heapSize) {
		// TODO Auto-generated method stub
		int l=index*2+1;
		int r=index*2+2;
		int smallest=index;
		while(l<heapSize){
			  if(heap[l].times<heap[index].times){
			     smallest = l;
			  }
			  if(r<heapSize && heap[r].times < heap[smallest].times){
				  smallest = r;
			  }
			  if(smallest != index){
			    swap(smallest,index);
			  }else{
			    break;
			  }
			   index=smallest;
			   l=index*2+1;
			   r=index*2+2;
		}
	}

	public void printTopK(){
		System.out.println("TOP: ");
		for(int i=0;i!=heap.length;i++){
			if(heap[i]==null){
				break;
			}
			System.out.println("Str:"+heap[i].str);
			System.out.println("Times:"+heap[i].times);
		}
	}
}
